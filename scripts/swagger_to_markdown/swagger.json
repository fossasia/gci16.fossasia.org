{"basePath": "/api/v2", "paths": {"/events": {"post": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/Event"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/EventPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create an event", "operationId": "post_event_list"}, "get": {"tags": ["events"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/EventComplete"}}, "description": "Success"}}, "parameters": [{"type": "string", "in": "query", "name": "start_time_lt"}, {"type": "string", "in": "query", "name": "end_time_lt"}, {"type": "string", "in": "query", "name": "privacy"}, {"type": "string", "name": "contains", "in": "query", "description": "Contains the string in name and description"}, {"type": "string", "in": "query", "name": "end_time_gt"}, {"type": "string", "name": "include", "in": "query", "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)"}, {"type": "string", "in": "query", "name": "type"}, {"type": "string", "in": "query", "name": "location"}, {"type": "string", "in": "query", "name": "time_period"}, {"type": "string", "in": "query", "name": "start_time_gt"}, {"type": "string", "in": "query", "name": "state"}, {"type": "string", "in": "query", "name": "sub_topic"}, {"type": "string", "in": "query", "name": "topic"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all events", "operationId": "get_event_list"}}, "/events/page": {"get": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/EventPaginated"}, "description": "Success"}}, "parameters": [{"type": "string", "in": "query", "name": "start_time_lt"}, {"type": "string", "in": "query", "name": "end_time_lt"}, {"type": "string", "in": "query", "name": "privacy"}, {"type": "string", "name": "contains", "in": "query", "description": "Contains the string in name and description"}, {"type": "string", "in": "query", "name": "end_time_gt"}, {"type": "string", "name": "include", "in": "query", "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors)"}, {"type": "string", "in": "query", "name": "type"}, {"type": "string", "in": "query", "name": "location"}, {"type": "string", "in": "query", "name": "time_period"}, {"type": "string", "in": "query", "name": "start_time_gt"}, {"type": "string", "in": "query", "name": "state"}, {"type": "string", "in": "query", "name": "topic"}, {"in": "query", "type": "integer", "name": "start", "default": 1, "description": "Serial number to start from"}, {"type": "string", "in": "query", "name": "sub_topic"}, {"in": "query", "type": "integer", "name": "limit", "default": 20, "description": "Limit on the number of results"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List events in a paginated manner", "operationId": "get_event_list_paginated"}}, "/events/{event_id}": {"delete": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/Event"}, "description": "Success"}, "404": {"description": "Event not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete an event given its id", "operationId": "delete_event"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path", "description": null}], "put": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/Event"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/EventPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update an event given its id", "operationId": "put_event"}, "get": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/EventComplete"}, "description": "Success"}, "404": {"description": "Event not found"}}, "parameters": [{"type": "string", "name": "include", "in": "query", "description": "Comma separated list of additional fields to load. Supported: sessions,tracks,microlocations,speakers,sponsors,tickets)"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch an event given its id", "operationId": "get_event"}}, "/events/{event_id}/attendees/": {"get": {"tags": ["attendees"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/TicketHolder"}}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Get attendees of the event", "operationId": "get_attendees_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/attendees/check_in_toggle/{holder_identifier}": {"post": {"tags": ["attendees"], "responses": {"200": {"schema": {"$ref": "#/definitions/TicketHolder"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Toggle and Attendee's Checked in State", "operationId": "post_attendee_check_in_toggle"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}, {"required": true, "type": "string", "in": "path", "name": "holder_identifier"}]}, "/events/{event_id}/attendees/check_in_toggle/{holder_identifier}/check_in": {"post": {"tags": ["attendees"], "responses": {"200": {"schema": {"$ref": "#/definitions/TicketHolder"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Check in attendee", "operationId": "post_attendee_check_in"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}, {"required": true, "type": "string", "in": "path", "name": "holder_identifier"}]}, "/events/{event_id}/attendees/check_in_toggle/{holder_identifier}/check_out": {"post": {"tags": ["attendees"], "responses": {"200": {"schema": {"$ref": "#/definitions/TicketHolder"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Check out attendee", "operationId": "post_attendee_check_out"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}, {"required": true, "type": "string", "in": "path", "name": "holder_identifier"}]}, "/events/{event_id}/event": {"get": {"parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "tags": ["events"], "summary": "Fetch an event given its id", "operationId": "get_event_webapp", "description": "Alternate endpoint for fetching an event.", "responses": {"200": {"schema": {"$ref": "#/definitions/EventComplete"}, "description": "Success"}, "404": {"description": "Event not found"}}}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path", "description": null}]}, "/events/{event_id}/links": {"post": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/SocialLink"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SocialLinkPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create a social link", "operationId": "post_social_link_list"}, "get": {"tags": ["events"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/SocialLink"}}, "description": "Success"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all social links", "operationId": "get_social_link_list"}, "parameters": [{"required": true, "type": "integer", "name": "event_id", "in": "path", "description": null}]}, "/events/{event_id}/links/{link_id}": {"delete": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/SocialLink"}, "description": "Success"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete a social link given its id", "operationId": "delete_social_link"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "link_id"}, {"required": true, "type": "integer", "in": "path", "name": "event_id"}], "put": {"tags": ["events"], "responses": {"200": {"schema": {"$ref": "#/definitions/SocialLink"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SocialLinkPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update a social link given its id", "operationId": "put_social_link"}}, "/events/{event_id}/microlocations": {"post": {"tags": ["microlocations"], "responses": {"200": {"schema": {"$ref": "#/definitions/Microlocation"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/MicrolocationPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create a microlocation", "operationId": "post_microlocation_list"}, "get": {"tags": ["microlocations"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/Microlocation"}}, "description": "Success"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all microlocations", "operationId": "get_microlocation_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/microlocations/page": {"get": {"tags": ["microlocations"], "responses": {"200": {"schema": {"$ref": "#/definitions/MicrolocationPaginated"}, "description": "Success"}}, "parameters": [{"in": "query", "type": "integer", "name": "start", "default": 1, "description": "Serial number to start from"}, {"in": "query", "type": "integer", "name": "limit", "default": 20, "description": "Limit on the number of results"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List microlocations in a paginated manner", "operationId": "get_microlocation_list_paginated"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/microlocations/{microlocation_id}": {"delete": {"tags": ["microlocations"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Microlocation"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete a microlocation given its id", "operationId": "delete_microlocation"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "microlocation_id"}, {"required": true, "type": "integer", "in": "path", "name": "event_id"}], "put": {"tags": ["microlocations"], "responses": {"400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "200": {"schema": {"$ref": "#/definitions/Microlocation"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/MicrolocationPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update a microlocation given its id", "operationId": "put_microlocation"}, "get": {"tags": ["microlocations"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Microlocation"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch a microlocation given its id", "operationId": "get_microlocation"}}, "/events/{event_id}/notifications": {"post": {"tags": ["notifications"], "responses": {"200": {"schema": {"$ref": "#/definitions/Notification"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/NotificationPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create user notification", "operationId": "post_user_notifications"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/orders/{identifier}": {"get": {"tags": ["tickets"], "responses": {"200": {"schema": {"$ref": "#/definitions/Order"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Get information about a ticket", "operationId": "get_order"}, "parameters": [{"required": true, "type": "string", "in": "path", "name": "identifier"}, {"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/sessions": {"post": {"tags": ["sessions"], "responses": {"200": {"schema": {"$ref": "#/definitions/Session"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SessionPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create a session", "operationId": "post_session_list"}, "get": {"tags": ["sessions"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/Session"}}, "description": "Success"}}, "parameters": [{"type": "string", "in": "query", "name": "start_time_lt"}, {"type": "string", "in": "query", "name": "end_time_lt"}, {"type": "string", "name": "order_by", "in": "query", "description": "Order by a field, example \"start_time.asc\" or \"end_time.desc\""}, {"type": "string", "in": "query", "name": "end_time_gt"}, {"type": "string", "in": "query", "name": "start_time_gt"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all sessions", "operationId": "get_session_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/sessions/page": {"get": {"tags": ["sessions"], "responses": {"200": {"schema": {"$ref": "#/definitions/SessionPaginated"}, "description": "Success"}}, "parameters": [{"type": "string", "in": "query", "name": "start_time_lt"}, {"type": "string", "in": "query", "name": "end_time_lt"}, {"type": "string", "name": "order_by", "in": "query", "description": "Order by a field, example \"start_time.asc\" or \"end_time.desc\""}, {"type": "string", "in": "query", "name": "end_time_gt"}, {"type": "string", "in": "query", "name": "start_time_gt"}, {"in": "query", "type": "integer", "name": "start", "default": 1, "description": "Serial number to start from"}, {"in": "query", "type": "integer", "name": "limit", "default": 20, "description": "Limit on the number of results"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List sessions in a paginated manner", "operationId": "get_session_list_paginated"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/sessions/types": {"post": {"tags": ["sessions"], "responses": {"200": {"schema": {"$ref": "#/definitions/SessionType"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SessionTypePost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create a session type", "operationId": "post_session_type_list"}, "get": {"tags": ["sessions"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/SessionType"}}, "description": "Success"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all session types", "operationId": "get_session_type_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/sessions/types/{type_id}": {"delete": {"tags": ["sessions"], "responses": {"200": {"schema": {"$ref": "#/definitions/SessionType"}, "description": "Success"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete a session type given its id", "operationId": "delete_session_type"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "type_id"}, {"required": true, "type": "integer", "in": "path", "name": "event_id"}], "put": {"tags": ["sessions"], "responses": {"200": {"schema": {"$ref": "#/definitions/SessionType"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SessionTypePost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update a session type given its id", "operationId": "put_session_type"}}, "/events/{event_id}/sessions/{session_id}": {"delete": {"tags": ["sessions"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Session"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete a session given its id", "operationId": "delete_session"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "session_id"}, {"required": true, "type": "integer", "in": "path", "name": "event_id"}], "put": {"tags": ["sessions"], "responses": {"400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "200": {"schema": {"$ref": "#/definitions/Session"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SessionPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update a session given its id", "operationId": "put_session"}, "get": {"tags": ["sessions"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Session"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch a session given its id", "operationId": "get_session"}}, "/events/{event_id}/speakers": {"post": {"tags": ["speakers"], "responses": {"400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}, "200": {"schema": {"$ref": "#/definitions/Speaker"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "201": {"description": "Resource created successfully"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SpeakerPost"}}], "summary": "Create a speaker", "operationId": "post_speaker_list"}, "get": {"tags": ["speakers"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/Speaker"}}, "description": "Success"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}], "summary": "List all speakers", "operationId": "get_speaker_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/speakers/page": {"get": {"tags": ["speakers"], "responses": {"200": {"schema": {"$ref": "#/definitions/SpeakerPaginated"}, "description": "Success"}}, "parameters": [{"in": "query", "type": "integer", "name": "start", "default": 1, "description": "Serial number to start from"}, {"in": "query", "type": "integer", "name": "limit", "default": 20, "description": "Limit on the number of results"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}], "summary": "List speakers in a paginated manner", "operationId": "get_speaker_list_paginated"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/speakers/{speaker_id}": {"delete": {"tags": ["speakers"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Speaker"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "summary": "Delete a speaker given its id", "operationId": "delete_speaker"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "speaker_id"}, {"required": true, "type": "integer", "in": "path", "name": "event_id"}], "put": {"tags": ["speakers"], "responses": {"400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}, "200": {"schema": {"$ref": "#/definitions/Speaker"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SpeakerPost"}}], "summary": "Update a speaker given its id", "operationId": "put_speaker"}, "get": {"tags": ["speakers"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Speaker"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}], "summary": "Fetch a speaker given its id", "operationId": "get_speaker"}}, "/events/{event_id}/sponsors": {"post": {"tags": ["sponsors"], "responses": {"200": {"schema": {"$ref": "#/definitions/Sponsor"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SponsorPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create a sponsor", "operationId": "post_sponsor_list"}, "get": {"tags": ["sponsors"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/Sponsor"}}, "description": "Success"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all sponsors", "operationId": "get_sponsor_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/sponsors/page": {"get": {"tags": ["sponsors"], "responses": {"200": {"schema": {"$ref": "#/definitions/SponsorPaginated"}, "description": "Success"}}, "parameters": [{"in": "query", "type": "integer", "name": "start", "default": 1, "description": "Serial number to start from"}, {"in": "query", "type": "integer", "name": "limit", "default": 20, "description": "Limit on the number of results"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List sponsors in a paginated manner", "operationId": "get_sponsor_list_paginated"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/sponsors/types": {"get": {"tags": ["sponsors"], "responses": {"200": {"schema": {"type": "array", "items": {"type": "string"}}, "description": "Success"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}], "summary": "List all sponsor types", "operationId": "get_sponsor_types_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/sponsors/{sponsor_id}": {"delete": {"tags": ["sponsors"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Sponsor"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete a sponsor given its id", "operationId": "delete_sponsor"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}, {"required": true, "type": "integer", "in": "path", "name": "sponsor_id"}], "put": {"tags": ["sponsors"], "responses": {"400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "200": {"schema": {"$ref": "#/definitions/Sponsor"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/SponsorPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update a sponsor given its id", "operationId": "put_sponsor"}, "get": {"tags": ["sponsors"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Sponsor"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch a sponsor given its id", "operationId": "get_sponsor"}}, "/events/{event_id}/tickets/": {"get": {"tags": ["tickets"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/Ticket"}}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Get tickets of the event", "operationId": "get_tickets_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/tickets/{ticket_id}": {"get": {"tags": ["tickets"], "responses": {"200": {"schema": {"$ref": "#/definitions/Ticket"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Get information about a ticket", "operationId": "get_ticket"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}, {"required": true, "type": "integer", "in": "path", "name": "ticket_id"}]}, "/events/{event_id}/tracks": {"post": {"tags": ["tracks"], "responses": {"200": {"schema": {"$ref": "#/definitions/Track"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Event does not exist"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/TrackPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create a track", "operationId": "post_track_list"}, "get": {"tags": ["tracks"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/Track"}}, "description": "Success"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all tracks", "operationId": "get_track_list"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/tracks/page": {"get": {"tags": ["tracks"], "responses": {"200": {"schema": {"$ref": "#/definitions/TrackPaginated"}, "description": "Success"}}, "parameters": [{"in": "query", "type": "integer", "name": "start", "default": 1, "description": "Serial number to start from"}, {"in": "query", "type": "integer", "name": "limit", "default": 20, "description": "Limit on the number of results"}, {"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List tracks in a paginated manner", "operationId": "get_track_list_paginated"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}]}, "/events/{event_id}/tracks/{track_id}": {"delete": {"tags": ["tracks"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Track"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete a track given its id", "operationId": "delete_track"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "event_id"}, {"required": true, "type": "integer", "in": "path", "name": "track_id"}], "put": {"tags": ["tracks"], "responses": {"400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "200": {"schema": {"$ref": "#/definitions/Track"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/TrackPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update a track given its id", "operationId": "put_track"}, "get": {"tags": ["tracks"], "responses": {"400": {"schema": {"$ref": "#/definitions/InvalidServiceError"}, "description": "Service does not belong to event"}, "200": {"schema": {"$ref": "#/definitions/Track"}, "description": "Success"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Service not found"}}, "parameters": [{"type": "string", "name": "If-None-Match", "in": "header", "description": "ETag saved by client for cached resource"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch a track given its id", "operationId": "get_track"}}, "/login": {"post": {"tags": ["login"], "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/Login"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "operationId": "post_login", "responses": {"200": {"schema": {"$ref": "#/definitions/Token"}, "description": "Success"}, "401": {"description": "Authentication Failed"}}}}, "/users": {"post": {"tags": ["users"], "responses": {"200": {"schema": {"$ref": "#/definitions/User"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation error"}, "201": {"description": "Resource created successfully"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/UserPost"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Create a user", "operationId": "post_user_list"}, "get": {"tags": ["users"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/User"}}, "description": "Success"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List all users", "operationId": "get_user_list"}}, "/users/me": {"get": {"tags": ["users"], "responses": {"200": {"schema": {"$ref": "#/definitions/User"}, "description": "Success"}, "404": {"description": "User not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch the current authenticated user", "operationId": "get_user_self"}}, "/users/me/events": {"get": {"tags": ["users"], "responses": {"200": {"schema": {"type": "array", "items": {"$ref": "#/definitions/Event"}}, "description": "Success"}, "404": {"description": "User not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch the current authenticated user's events", "operationId": "get_user_self_events"}}, "/users/page": {"get": {"tags": ["users"], "responses": {"200": {"schema": {"$ref": "#/definitions/UserPaginated"}, "description": "Success"}}, "parameters": [{"in": "query", "type": "integer", "name": "start", "default": 1, "description": "Serial number to start from"}, {"in": "query", "type": "integer", "name": "limit", "default": 20, "description": "Limit on the number of results"}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "List users in a paginated manner", "operationId": "get_user_list_paginated"}}, "/users/{user_id}": {"delete": {"tags": ["users"], "responses": {"200": {"schema": {"$ref": "#/definitions/User"}, "description": "Success"}, "404": {"description": "User not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Delete a user given its id", "operationId": "delete_user"}, "parameters": [{"required": true, "type": "integer", "in": "path", "name": "user_id"}], "put": {"tags": ["users"], "responses": {"200": {"schema": {"$ref": "#/definitions/User"}, "description": "Success"}, "400": {"schema": {"$ref": "#/definitions/ValidationError"}, "description": "Validation Error"}, "404": {"schema": {"$ref": "#/definitions/NotFoundError"}, "description": "Object/Event not found"}, "401": {"schema": {"$ref": "#/definitions/NotAuthorizedError"}, "description": "Authentication failure"}}, "parameters": [{"required": true, "name": "payload", "in": "body", "schema": {"$ref": "#/definitions/UserPut"}}, {"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Update a user given its id", "operationId": "put_user"}, "get": {"tags": ["users"], "responses": {"200": {"schema": {"$ref": "#/definitions/User"}, "description": "Success"}, "404": {"description": "User not found"}}, "parameters": [{"type": "string", "description": "An optional fields mask", "format": "mask", "in": "header", "name": "X-Fields"}], "summary": "Fetch a user given its id", "operationId": "get_user"}}}, "info": {"title": "Organizer Server APIs", "version": "2.0", "description": "Open Event Organizer APIs"}, "consumes": ["application/json"], "tags": [{"description": "Default namespace", "name": "default"}, {"description": "Events", "name": "events"}, {"description": "Sessions", "name": "sessions"}, {"description": "Tracks", "name": "tracks"}, {"description": "Speakers", "name": "speakers"}, {"description": "Sponsors", "name": "sponsors"}, {"description": "Microlocations", "name": "microlocations"}, {"description": "Login", "name": "login"}, {"description": "Exports", "name": "exports"}, {"description": "Imports", "name": "imports"}, {"description": "Users", "name": "users"}, {"description": "Extras", "name": "extras"}, {"description": "Notifications", "name": "notifications"}, {"description": "Error Responses", "name": "errors"}, {"description": "Attendees", "name": "attendees"}, {"description": "Tickets", "name": "tickets"}], "host": "open-event-dev.herokuapp.com", "produces": ["application/json"], "swagger": "2.0", "definitions": {"EventPaginated": {"type": "object", "properties": {"next": {"type": "string"}, "previous": {"type": "string"}, "count": {"type": "integer"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/definitions/Event"}}}}, "TrackPaginated": {"type": "object", "properties": {"next": {"type": "string"}, "previous": {"type": "string"}, "count": {"type": "integer"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/definitions/Track"}}}}, "Sponsor": {"required": ["id", "name"], "type": "object", "properties": {"logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "level": {"type": "string"}, "name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "description": {"type": "string"}, "url": {"type": "string", "example": "http://website.com", "format": "uri"}, "sponsor_type": {"type": "string"}}}, "UserPaginated": {"type": "object", "properties": {"next": {"type": "string"}, "previous": {"type": "string"}, "count": {"type": "integer"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}, "EventCFS": {"type": "object", "properties": {"privacy": {"type": "string", "example": "public"}, "start_date": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "end_date": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "timezone": {"type": "string"}, "announcement": {"type": "string"}}}, "EventCreator": {"type": "object", "properties": {"email": {"type": "string", "example": "email@domain.com", "format": "email"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "EventCopyright": {"type": "object", "properties": {"holder_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "logo": {"type": "string"}, "licence": {"type": "string"}, "year": {"type": "integer", "example": 0, "format": "int"}, "licence_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "holder": {"type": "string"}}}, "Ticket": {"type": "object", "properties": {"quantity": {"type": "integer", "example": 0, "format": "int"}, "price": {"type": "number", "example": 0.0, "format": "float"}, "name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "type": {"type": "string"}, "description": {"type": "string"}}}, "Session": {"required": ["end_time", "id", "start_time", "title"], "type": "object", "properties": {"speakers": {"type": "array", "items": {"$ref": "#/definitions/SessionSpeaker"}}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "microlocation": {"$ref": "#/definitions/SessionMicrolocation"}, "state": {"type": "string", "example": "pending"}, "comments": {"type": "string"}, "video": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "signup_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "track": {"$ref": "#/definitions/SessionTrack"}, "long_abstract": {"type": "string"}, "audio": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "slides": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "id": {"type": "integer", "example": 0, "format": "int"}, "language": {"type": "string", "example": "German"}, "title": {"type": "string"}, "subtitle": {"type": "string"}, "short_abstract": {"type": "string"}, "session_type": {"$ref": "#/definitions/SessionType"}}}, "EventPost": {"required": ["end_time", "name", "start_time"], "type": "object", "properties": {"logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "topic": {"type": "string", "example": "Auto, Boat & Air"}, "description": {"type": "string"}, "code_of_conduct": {"type": "string"}, "searchable_location_name": {"type": "string"}, "state": {"default": "Draft", "example": "Draft", "type": "string"}, "timezone": {"type": "string"}, "sub_topic": {"type": "string", "example": "Air"}, "copyright": {"$ref": "#/definitions/EventCopyright"}, "event_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "name": {"type": "string"}, "large": {"type": "string", "example": "http://website.com", "format": "uri"}, "organizer_description": {"type": "string"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "schedule_published_on": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "location_name": {"type": "string"}, "thumbnail": {"type": "string", "example": "http://website.com", "format": "uri"}, "has_session_speakers": {"default": false, "example": false, "type": "boolean"}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "call_for_papers": {"$ref": "#/definitions/EventCFS"}, "privacy": {"type": "string", "example": "public"}, "ticket_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "identifier": {"type": "string"}, "type": {"type": "string", "example": "Appearance or Signing"}, "background_image": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "organizer_name": {"type": "string"}}}, "ValidationError": {"type": "object", "properties": {"code": {"type": "integer", "example": 400}, "status": {"type": "string", "example": "INVALID_FIELD"}, "message": {"type": "string"}, "field": {"type": "string"}}}, "SessionType": {"required": ["id", "length", "name"], "type": "object", "properties": {"name": {"type": "string"}, "length": {"type": "number", "example": 0.0, "format": "float"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "NotFoundError": {"type": "object", "properties": {"code": {"type": "integer", "example": 404}, "status": {"type": "string", "example": "NOT_FOUND"}, "message": {"type": "string"}, "field": {"type": "string"}}}, "Order": {"type": "object", "properties": {"completed_at": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "identifier": {"type": "string"}, "payment_mode": {"type": "string"}, "paid_via": {"type": "string"}, "status": {"type": "string"}, "invoice_number": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "amount": {"type": "number", "example": 0.0, "format": "float"}}}, "TrackSession": {"required": ["id"], "type": "object", "properties": {"title": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "Speaker": {"required": ["country", "email", "id", "name", "organisation"], "type": "object", "properties": {"twitter": {"type": "string"}, "long_biography": {"type": "string"}, "mobile": {"type": "string"}, "name": {"type": "string"}, "featured": {"type": "boolean", "example": false}, "position": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "linkedin": {"type": "string"}, "website": {"type": "string", "example": "http://website.com", "format": "uri"}, "organisation": {"type": "string"}, "github": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "short_biography": {"type": "string"}, "facebook": {"type": "string"}, "photo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "sessions": {"type": "array", "items": {"$ref": "#/definitions/SpeakerSession"}}, "country": {"type": "string"}}}, "NotificationPost": {"required": ["email"], "type": "object", "properties": {"title": {"type": "string"}, "message": {"type": "string"}, "received_at": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "action": {"type": "string"}, "email": {"type": "string"}}}, "SessionPaginated": {"type": "object", "properties": {"next": {"type": "string"}, "previous": {"type": "string"}, "count": {"type": "integer"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/definitions/Session"}}}}, "NotAuthorizedError": {"type": "object", "properties": {"code": {"type": "integer", "example": 401}, "status": {"type": "string", "example": "NOT_AUTHORIZED"}, "message": {"type": "string"}, "field": {"type": "string"}}}, "SponsorPost": {"required": ["name"], "type": "object", "properties": {"logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "level": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "url": {"type": "string", "example": "http://website.com", "format": "uri"}, "sponsor_type": {"type": "string"}}}, "SessionSpeaker": {"required": ["id"], "type": "object", "properties": {"name": {"type": "string"}, "organisation": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "MicrolocationPost": {"required": ["name"], "type": "object", "properties": {"floor": {"type": "integer", "example": 0, "format": "int"}, "room": {"type": "string"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "name": {"type": "string"}}}, "SpeakerPaginated": {"type": "object", "properties": {"next": {"type": "string"}, "previous": {"type": "string"}, "count": {"type": "integer"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/definitions/Speaker"}}}}, "InvalidServiceError": {"type": "object", "properties": {"code": {"type": "integer", "example": 400}, "status": {"type": "string", "example": "INVALID_SERVICE"}, "message": {"type": "string"}, "field": {"type": "string"}}}, "EventComplete": {"required": ["end_time", "id", "name", "start_time"], "type": "object", "properties": {"logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "id": {"type": "integer", "example": 0, "format": "int"}, "topic": {"type": "string", "example": "Auto, Boat & Air"}, "description": {"type": "string"}, "sessions": {"type": "array", "items": {"$ref": "#/definitions/Session"}}, "code_of_conduct": {"type": "string"}, "searchable_location_name": {"type": "string"}, "state": {"default": "Draft", "example": "Draft", "type": "string"}, "timezone": {"type": "string"}, "version": {"$ref": "#/definitions/EventVersion"}, "copyright": {"$ref": "#/definitions/EventCopyright"}, "speakers": {"type": "array", "items": {"$ref": "#/definitions/Speaker"}}, "event_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "name": {"type": "string"}, "large": {"type": "string", "example": "http://website.com", "format": "uri"}, "organizer_description": {"type": "string"}, "creator": {"$ref": "#/definitions/EventCreator"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "schedule_published_on": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "background_image": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "location_name": {"type": "string"}, "thumbnail": {"type": "string", "example": "http://website.com", "format": "uri"}, "microlocations": {"type": "array", "items": {"$ref": "#/definitions/Microlocation"}}, "has_session_speakers": {"default": false, "example": false, "type": "boolean"}, "sponsors": {"type": "array", "items": {"$ref": "#/definitions/Sponsor"}}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "call_for_papers": {"$ref": "#/definitions/EventCFS"}, "privacy": {"type": "string", "example": "public"}, "tracks": {"type": "array", "items": {"$ref": "#/definitions/Track"}}, "tickets": {"type": "array", "items": {"$ref": "#/definitions/Ticket"}}, "ticket_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "sub_topic": {"type": "string", "example": "Air"}, "identifier": {"type": "string"}, "type": {"type": "string", "example": "Appearance or Signing"}, "social_links": {"type": "array", "items": {"$ref": "#/definitions/SocialLink"}}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "organizer_name": {"type": "string"}}}, "SocialLinkPost": {"required": ["link", "name"], "type": "object", "properties": {"link": {"type": "string"}, "name": {"type": "string"}}}, "SessionTypePost": {"required": ["length", "name"], "type": "object", "properties": {"length": {"type": "number", "example": 0.0, "format": "float"}, "name": {"type": "string"}}}, "Track": {"required": ["color", "id", "name"], "type": "object", "properties": {"name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}, "color": {"type": "string", "example": "green", "format": "color"}, "location": {"type": "string"}, "track_image_url": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "description": {"type": "string"}, "sessions": {"type": "array", "items": {"$ref": "#/definitions/TrackSession"}}}}, "SessionMicrolocation": {"required": ["id"], "type": "object", "properties": {"name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "User": {"required": ["email"], "type": "object", "properties": {"last_access_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "signup_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "id": {"type": "integer", "example": 0, "format": "int"}, "user_detail": {"$ref": "#/definitions/UserDetail"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "SpeakerPost": {"required": ["country", "email", "name", "organisation"], "type": "object", "properties": {"twitter": {"type": "string"}, "long_biography": {"type": "string"}, "name": {"type": "string"}, "featured": {"type": "boolean", "example": false}, "position": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "linkedin": {"type": "string"}, "website": {"type": "string", "example": "http://website.com", "format": "uri"}, "organisation": {"type": "string"}, "github": {"type": "string"}, "short_biography": {"type": "string"}, "facebook": {"type": "string"}, "photo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "mobile": {"type": "string"}, "country": {"type": "string"}}}, "MicrolocationPaginated": {"type": "object", "properties": {"next": {"type": "string"}, "previous": {"type": "string"}, "count": {"type": "integer"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/definitions/Microlocation"}}}}, "Login": {"required": ["email", "password"], "type": "object", "properties": {"password": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "SponsorPaginated": {"type": "object", "properties": {"next": {"type": "string"}, "previous": {"type": "string"}, "count": {"type": "integer"}, "start": {"type": "integer"}, "limit": {"type": "integer"}, "results": {"type": "array", "items": {"$ref": "#/definitions/Sponsor"}}}}, "UserPut": {"required": ["email"], "type": "object", "properties": {"user_detail": {"$ref": "#/definitions/UserDetail"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "Event": {"required": ["end_time", "id", "name", "start_time"], "type": "object", "properties": {"logo": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "description": {"type": "string"}, "topic": {"type": "string", "example": "Auto, Boat & Air"}, "id": {"type": "integer", "example": 0, "format": "int"}, "event_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "searchable_location_name": {"type": "string"}, "state": {"default": "Draft", "example": "Draft", "type": "string"}, "timezone": {"type": "string"}, "version": {"$ref": "#/definitions/EventVersion"}, "copyright": {"$ref": "#/definitions/EventCopyright"}, "code_of_conduct": {"type": "string"}, "name": {"type": "string"}, "large": {"type": "string", "example": "http://website.com", "format": "uri"}, "organizer_description": {"type": "string"}, "creator": {"$ref": "#/definitions/EventCreator"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "schedule_published_on": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "location_name": {"type": "string"}, "thumbnail": {"type": "string", "example": "http://website.com", "format": "uri"}, "has_session_speakers": {"default": false, "example": false, "type": "boolean"}, "start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "call_for_papers": {"$ref": "#/definitions/EventCFS"}, "privacy": {"type": "string", "example": "public"}, "ticket_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "sub_topic": {"type": "string", "example": "Air"}, "identifier": {"type": "string"}, "type": {"type": "string", "example": "Appearance or Signing"}, "social_links": {"type": "array", "items": {"$ref": "#/definitions/SocialLink"}}, "background_image": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "organizer_name": {"type": "string"}}}, "Microlocation": {"required": ["id", "name"], "type": "object", "properties": {"name": {"type": "string"}, "latitude": {"type": "number", "example": 0.0, "format": "float"}, "floor": {"type": "integer", "example": 0, "format": "int"}, "longitude": {"type": "number", "example": 0.0, "format": "float"}, "id": {"type": "integer", "example": 0, "format": "int"}, "room": {"type": "string"}}}, "UserPost": {"required": ["email", "password"], "type": "object", "properties": {"password": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}}}, "TrackPost": {"required": ["color", "name"], "type": "object", "properties": {"description": {"type": "string"}, "color": {"type": "string", "example": "green", "format": "color"}, "location": {"type": "string"}, "track_image_url": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "name": {"type": "string"}}}, "EventVersion": {"type": "object", "properties": {"sponsors_ver": {"type": "integer", "example": 0, "format": "int"}, "microlocations_ver": {"type": "integer", "example": 0, "format": "int"}, "tracks_ver": {"type": "integer", "example": 0, "format": "int"}, "event_ver": {"type": "integer", "example": 0, "format": "int"}, "speakers_ver": {"type": "integer", "example": 0, "format": "int"}, "sessions_ver": {"type": "integer", "example": 0, "format": "int"}}}, "SessionPost": {"required": ["end_time", "start_time", "title"], "type": "object", "properties": {"start_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "end_time": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "state": {"type": "string", "example": "pending"}, "comments": {"type": "string"}, "track_id": {"type": "integer", "example": 0, "format": "int"}, "video": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "speaker_ids": {"type": "array", "items": {"type": "integer", "example": 0, "format": "int"}}, "signup_url": {"type": "string", "example": "http://website.com", "format": "uri"}, "long_abstract": {"type": "string"}, "audio": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "slides": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "title": {"type": "string"}, "language": {"type": "string", "example": "German"}, "microlocation_id": {"type": "integer", "example": 0, "format": "int"}, "subtitle": {"type": "string"}, "short_abstract": {"type": "string"}, "session_type_id": {"type": "integer", "example": 0, "format": "int"}}}, "TicketHolder": {"type": "object", "properties": {"firstname": {"type": "string"}, "email": {"type": "string", "example": "email@domain.com", "format": "email"}, "lastname": {"type": "string"}, "checked_in": {"type": "boolean", "example": false}, "ticket": {"$ref": "#/definitions/Ticket"}, "id": {"type": "integer", "example": 0, "format": "int"}, "order": {"$ref": "#/definitions/Order"}}}, "UserDetail": {"type": "object", "properties": {"firstname": {"type": "string"}, "twitter": {"type": "string"}, "contact": {"type": "string"}, "avatar": {"type": "string", "example": "http://website.com/item.ext", "format": "uri"}, "lastname": {"type": "string"}, "details": {"type": "string"}, "facebook": {"type": "string"}}}, "Notification": {"required": ["email", "id"], "type": "object", "properties": {"message": {"type": "string"}, "action": {"type": "string"}, "email": {"type": "string"}, "received_at": {"type": "string", "example": "2016-06-06T11:22:33", "format": "date-time"}, "id": {"type": "integer", "example": 0, "format": "int"}, "title": {"type": "string"}}}, "Token": {"type": "object", "properties": {"access_token": {"type": "string"}}}, "SpeakerSession": {"type": "object", "properties": {"title": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "SessionTrack": {"required": ["id"], "type": "object", "properties": {"name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}, "SocialLink": {"required": ["link", "name"], "type": "object", "properties": {"link": {"type": "string"}, "name": {"type": "string"}, "id": {"type": "integer", "example": 0, "format": "int"}}}}, "responses": {"ParseError": {"description": "When a mask can't be parsed"}, "PermissionDeniedError": {}, "NotAuthorizedError": {}, "ValidationError": {}, "InvalidServiceError": {}, "NotFoundError": {}, "MaskError": {"description": "When any error occurs on mask"}}}
